import os
import re
import logging
from openai import OpenAI

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def analyze_with_ai(text: str) -> tuple[str, float]:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key or api_key == "your-openai-api-key":
        return create_demo_analysis(text)
    
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": """–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–Ω–∞–±–∂–µ–Ω–∏—é. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ü–µ–Ω–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫—É–ø–∫—É —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–æ—á–Ω–æ –∏ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä.
    –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:
    –ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ —Ç–æ—á–Ω–æ –æ–ø–∏—Å–∞–Ω –ø—Ä–µ–¥–º–µ—Ç –∑–∞–∫—É–ø–∫–∏.
    –ï—Å—Ç—å –ª–∏ –ø–æ–ª–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ (—Ç–∏–ø, –≤–∏–¥, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞–∑–º–µ—Ä, –º–∞—Ç–µ—Ä–∏–∞–ª, –º–æ–¥–µ–ª—å –∏ –ø—Ä.).
    –£–∫–∞–∑–∞–Ω—ã –ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
    –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—è–≤–∫–∏ —É–¥–æ–±–Ω–æ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã (–µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞, –ø–æ–∑–∏—Ü–∏–∏, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è).
–¶–µ–Ω–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ü–µ–Ω–∫—É. –ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 44-–§–ó –∏–ª–∏ 223-–§–ó) —Ç–∞–∫–∂–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.
–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–∫—É–ø–∫–∏ —Ç–æ–∂–µ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
–ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–∫—É–ø–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫–æ–ª–ª–∏—á–µ—Å–≤–æ –∏ –µ–¥–µ–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏:
    0‚Äì3 ‚Äî –∑–∞—è–≤–∫–∞ –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–∫—É–ø–∏—Ç—å.
    4‚Äì6 ‚Äî –∑–∞—è–≤–∫–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å—ë–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏: –º–Ω–æ–≥–æ –Ω–µ—è—Å–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–≥–æ.
    7‚Äì9 ‚Äî –∑–∞—è–≤–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–∞, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã –Ω–µ–±–æ–ª—å—à–∏–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è.
    10 ‚Äî –∑–∞—è–≤–∫–∞ –∏–¥–µ–∞–ª—å–Ω–∞: –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–ø–∏—Å–∞–Ω—ã –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ, —Å–Ω–∞–±–∂–µ–Ω–µ—Ü —Ç–æ—á–Ω–æ –ø–æ–π–º—ë—Ç, —á—Ç–æ –ø–æ–∫—É–ø–∞—Ç—å.
–í –æ—Ç–≤–µ—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏:
    –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å).
    –ü—Ä–∏–º–µ—Ä, –∫–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∑–∞—è–≤–∫—É.
    –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: –†–µ–π—Ç–∏–Ω–≥: X –∏–∑ 10."""
                },
                {"role": "user", "content": text}
            ],
            temperature=0.2
        )

        content = response.choices[0].message.content.strip()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        match = re.search(r'—Ä–µ–π—Ç–∏–Ω–≥[:\s]*([0-9]+(?:[.,][0-9]*)?)\s*–∏–∑\s*10', content.lower())
        rating = float(match.group(1).replace(',', '.')) if match else 0.0


        return content, rating

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI: {e}")
        return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑", 0.0

def create_demo_analysis(text: str) -> tuple[str, float]:
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    lines = text.lower().split('\n')
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    has_table = any('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' in line for line in lines)
    has_characteristics = any('—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏' in line and line.strip() != '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏' for line in lines)
    has_units = any('–µ–¥. –∏–∑–º' in line for line in lines)
    has_quantities = any('–∫–æ–ª-–≤–æ' in line for line in lines)
    has_prices = any('—Ü–µ–Ω–∞' in line for line in lines)
    
    # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–ª—é–±—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –∏ –Ω–µ–ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏)
    filled_items = 0
    for line in lines:
        if '|' in line:
            parts = [part.strip() for part in line.split('|')]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞)
            if len(parts) >= 2 and parts[1].strip() and not parts[1].strip().isdigit():
                filled_items += 1
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    score = 0
    feedback_parts = []
    
    if has_table:
        score += 2
        feedback_parts.append("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—è–≤–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–∞ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã")
    else:
        feedback_parts.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
    
    if filled_items > 0:
        score += 2
        feedback_parts.append(f"‚úÖ –£–∫–∞–∑–∞–Ω–æ {filled_items} –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤")
    else:
        feedback_parts.append("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–æ –æ–ø–∏—Å–∞–Ω—ã")
    
    if has_characteristics:
        score += 2
        feedback_parts.append("‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    else:
        feedback_parts.append("‚ö†Ô∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ")
    
    if has_units and has_quantities:
        score += 2
        feedback_parts.append("‚úÖ –£–∫–∞–∑–∞–Ω—ã –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    else:
        feedback_parts.append("‚ö†Ô∏è –ù–µ –≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–∫–∞–∑–∞–Ω—ã")
    
    if has_prices:
        score += 1
        feedback_parts.append("‚úÖ –£–∫–∞–∑–∞–Ω—ã —Ü–µ–Ω—ã")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    feedback_parts.append("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
    
    if score < 7:
        feedback_parts.append("‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
        feedback_parts.append("‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è")
        feedback_parts.append("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–Ω–æ—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π")
    else:
        feedback_parts.append("‚Ä¢ –ó–∞—è–≤–∫–∞ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        feedback_parts.append("‚Ä¢ –î–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    
    feedback_parts.append(f"\nü§ñ –î–µ–º–æ-—Ä–µ–∂–∏–º: –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò")
    feedback_parts.append(f"–†–µ–π—Ç–∏–Ω–≥: {score} –∏–∑ 10")
    
    return '\n'.join(feedback_parts), float(score)

